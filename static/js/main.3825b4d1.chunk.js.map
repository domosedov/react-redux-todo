{"version":3,"sources":["components/todo/todoSlice.js","components/todo/Todo.js","components/todo/visibilitySlice.js","components/todo/FilterButton.js","components/todo/TodoList.js","components/todo/TodoForm.js","components/todo/TodoApp.js","App.js","components/counter/counterSlice.js","store/store.js","store/localState.js","serviceWorker.js","index.js"],"names":["todoSlice","createSlice","name","initialState","reducers","addTodo","state","action","push","payload","toggleTodo","todo","find","item","id","completed","deleteTodo","idx","findIndex","splice","editTodo","text","todoReducer","reducer","actions","selectTodos","memo","handleToggle","handleDelete","dispatch","useDispatch","useState","todoText","setTodoText","isEditing","setIsEditing","inputRef","useRef","cn","useEffect","current","focus","changeTodo","e","preventDefault","className","onSubmit","value","onChange","target","onBlur","ref","onClick","filters","SHOW_ALL","SHOW_COMPLETED","SHOW_ACTIVE","visibilityFilterSlice","setFilter","visibilityFilterReducer","selectVisibilityFilter","visibilityFilter","FilterButton","buttonText","active","clickHandler","disabled","TodoList","todos","todoId","currentFilter","useSelector","buttons","key","length","map","TodoForm","trim","uuid","type","TodoApp","filterTodos","createSelector","filter","Error","App","counterSlice","increment","decrement","incrementByAmount","preloadedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","configureStore","counter","counterReducer","subscribe","throttle","stringify","setItem","saveState","getState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3825b4d1.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const todoSlice = createSlice({\n    name: 'todo',\n    initialState: [],\n    reducers: {\n        addTodo: (state, action) => {\n            state.push(action.payload);\n        },\n        toggleTodo: (state, action) => {\n            const todo = state.find(item => item.id === action.payload);\n            todo.completed = !todo.completed;\n        },\n        deleteTodo: (state, action) => {\n            const idx = state.findIndex(item => item.id === action.payload);\n            if (idx >= 0) {\n                state.splice(idx, 1);\n            }\n        },\n        editTodo: (state, action) => {\n            const todo = state.find(item => item.id === action.payload.id);\n            todo.text = action.payload.text;\n        }\n\n    },\n});\n\nconst {reducer: todoReducer, actions} = todoSlice;\n\nexport const { addTodo, toggleTodo, deleteTodo, editTodo } = actions;\n\nexport const selectTodos = state => state.todo;\n\nexport default todoReducer;\n","import React, {memo, useState, useRef, useEffect} from 'react';\nimport {MdDelete, MdDone, MdModeEdit} from \"react-icons/md\";\nimport {useDispatch} from \"react-redux\";\nimport {editTodo} from \"./todoSlice\";\n\nconst Todo = ({text, id, completed, handleToggle, handleDelete}) => {\n  const dispatch = useDispatch();\n  const [todoText, setTodoText] = useState(text);\n  const [isEditing, setIsEditing] = useState(false);\n  const inputRef = useRef(null);\n\n  let cn = 'todo__item';\n  if (completed) {\n    cn += ' todo__item--completed';\n  }\n\n  useEffect(() => {\n    if (isEditing) {\n      inputRef.current.focus();\n    }\n  }, [isEditing]);\n\n  const editTodoText = (e) => {\n    e.preventDefault();\n    setIsEditing(true);\n  }\n  \n  const changeTodo = (e) => {\n    e.preventDefault();\n    dispatch(editTodo({id, text: todoText}));\n    setIsEditing(false);\n  }\n\n  return (\n    <li className={cn}>\n      {\n        isEditing\n          ?\n          <form\n            className={'todo__edit'}\n            onSubmit={changeTodo}>\n            <textarea\n              className={'todo__text--change'}\n              value={todoText}\n              onChange={e => setTodoText(e.target.value)}\n              onBlur={changeTodo}\n              ref={inputRef}\n            />\n          </form>\n          :\n          <p className={'todo__text'}>{text}</p>\n      }\n\n      <span className={'todo__actions'}>\n        <button\n          className={'todo__button todo__button--complete'}\n          onClick={() => handleToggle(id)}\n        ><MdDone/></button>\n        <button\n          className={'todo__button todo__button--edit'}\n          onClick={editTodoText}\n        ><MdModeEdit/></button>\n        <button\n          className={'todo__button todo__button--delete'}\n          onClick={() => handleDelete(id)}\n        ><MdDelete/></button>\n            </span>\n    </li>\n  );\n};\n\nexport default memo(Todo);\n","import {createSlice} from '@reduxjs/toolkit';\n\nexport const filters = {\n    SHOW_ALL: 'SHOW ALL',\n    SHOW_COMPLETED: 'SHOW COMPLETED',\n    SHOW_ACTIVE: 'SHOW ACTIVE'\n}\n\nconst visibilityFilterSlice = createSlice({\n    name: 'visibility',\n    initialState: filters.SHOW_ALL,\n    reducers: {\n        setFilter: (state, action) => {\n            return action.payload\n        }\n    }\n});\n\nconst {actions, reducer: visibilityFilterReducer} = visibilityFilterSlice;\n\nexport const {setFilter} = actions;\n\nexport const selectVisibilityFilter = state => state.visibilityFilter\n\nexport default visibilityFilterReducer;\n","import React from 'react';\n\nconst FilterButton = ({buttonText, active, clickHandler}) => {\n  let cn = 'todo__filter';\n  if (active) {\n    cn += ' todo__filter--active';\n  }\n\n  return (\n    <button disabled={active} className={cn} onClick={() => clickHandler()}>\n      {buttonText}\n    </button>\n  )\n};\n\nexport default FilterButton;","import React from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {toggleTodo, deleteTodo} from './todoSlice';\nimport Todo from \"./Todo\";\nimport {setFilter, filters, selectVisibilityFilter} from \"./visibilitySlice\";\nimport FilterButton from \"./FilterButton\";\n\nconst TodoList = ({todos}) => {\n    const dispatch = useDispatch();\n\n    const handleToggle = (todoId) => {\n        dispatch(toggleTodo(todoId));\n    }\n\n    const handleDelete = (todoId) => {\n        dispatch(deleteTodo(todoId));\n    }\n\n    const currentFilter = useSelector(selectVisibilityFilter);\n    \n    const buttons = [];\n    \n    for (let key in filters) {\n      buttons.push(\n        <FilterButton key={key} buttonText={filters[key]} clickHandler={() => dispatch(setFilter(filters[key]))} active={filters[key] === currentFilter} />\n      )\n    }\n\n    if (todos.length > 0) {\n        return (\n            <>\n                <h1 className={'title'}>Todo List</h1>\n                <ul className={\"todo__list\"}>\n                    {todos.map(todo => <Todo\n                        key={todo.id}\n                        id={todo.id}\n                        completed={todo.completed}\n                        text={todo.text}\n                        handleToggle={handleToggle}\n                        handleDelete={handleDelete}\n                    />)}\n                </ul>\n                <div className={'todo__filters'}>\n                  {buttons}\n                </div>\n            </>\n        )\n    } else {\n        return (\n            <>\n              <h1 className={'title'}>Задач нет</h1>\n              <div className={'todo__filters'}>\n                {buttons}\n              </div>\n            </>\n        )\n    }\n\n};\n\nexport default TodoList;\n","import React, {useState} from 'react';\nimport {useDispatch} from \"react-redux\";\nimport {v4 as uuid} from 'uuid';\nimport {addTodo} from './todoSlice';\n\nconst TodoForm = () => {\n    const dispatch = useDispatch();\n    const [todoText, setTodoText] = useState('');\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        if (todoText.trim()) {\n            dispatch(addTodo({id: uuid(), text: todoText, completed: false}));\n        }\n        setTodoText('');\n    }\n\n    return (\n        <form\n            className={'todo__form'}\n            onSubmit={handleSubmit}\n        >\n            <textarea\n                value={todoText}\n                onChange={e => setTodoText(e.target.value)}\n                className={'todo__input'}\n            />\n            <button type=\"submit\" className={\"todo__add\"}>Add Todo</button>\n        </form>\n    )\n\n};\n\nexport default TodoForm;\n","import React from 'react';\nimport TodoList from \"./TodoList\";\nimport TodoForm from \"./TodoForm\";\nimport {useSelector} from \"react-redux\";\nimport {createSelector} from \"@reduxjs/toolkit\";\nimport {selectTodos} from \"./todoSlice\";\nimport {filters as visibilityFilter, selectVisibilityFilter} from \"./visibilitySlice\";\n\nconst TodoApp = () => {\n\n    const filterTodos = createSelector(\n        [selectTodos, selectVisibilityFilter],\n        (todos, filter) => {\n            switch (filter) {\n                case visibilityFilter.SHOW_ALL:\n                    return todos;\n                case visibilityFilter.SHOW_ACTIVE:\n                    return todos.filter(todo => !todo.completed);\n                case visibilityFilter.SHOW_COMPLETED:\n                    return todos.filter(todo => todo.completed);\n                default:\n                    throw new Error('No Filter!');\n            }\n        }\n    );\n\n    let todos = useSelector(state => filterTodos(state));\n\n    return (\n        <>\n            <TodoList todos={todos}/>\n            <TodoForm />\n        </>\n    )\n}\n\nexport default TodoApp;\n","import React from 'react';\r\nimport TodoApp from \"./components/todo/TodoApp\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <TodoApp/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport throttle from 'lodash/throttle';\r\nimport counterReducer from '../components/counter/counterSlice';\r\nimport todoReducer from '../components/todo/todoSlice';\r\nimport visibilityFilterReducer from \"../components/todo/visibilitySlice\";\r\nimport {loadState, saveState} from './localState';\r\n\r\nconst preloadedState = loadState();\r\n\r\n const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    todo: todoReducer,\r\n    visibilityFilter: visibilityFilterReducer\r\n  },\r\n  preloadedState\r\n});\r\n\r\nstore.subscribe(throttle(() => {\r\n  saveState(store.getState());\r\n}), 1000);\r\n\r\nexport default store;","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n      return undefined;\n  }\n}\n\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch (err) {\n    // Ignore errors\n  }\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the store load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web store is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different store. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.sass';\r\nimport App from './App';\r\nimport store from './store/store';\r\nimport {Provider} from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter as Router} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <Router>\r\n                <App/>\r\n            </Router>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your store to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}